# Generated by Django 5.0.10 on 2025-06-23 04:33

from django.db import migrations
from django.contrib.contenttypes.models import ContentType


def transfer_tag_relationships(apps, schema_editor):
    """
    Transfer existing tag relationships from TaggedItem to CustomImageTag.
    This restores tag data that was lost when switching to ClusterTaggableManager.
    """
    # Get the models from migration state
    CustomImage = apps.get_model('images', 'CustomImage')
    CustomImageTag = apps.get_model('images', 'CustomImageTag')
    TaggedItem = apps.get_model('taggit', 'TaggedItem')
    Tag = apps.get_model('taggit', 'Tag')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    
    # Get the ContentType for CustomImage using migration state
    try:
        custom_image_ct = ContentType.objects.get(app_label='images', model='customimage')
    except ContentType.DoesNotExist:
        print("ContentType for CustomImage not found, skipping migration.")
        return
    
    # Find all TaggedItem entries for CustomImage
    tagged_items = TaggedItem.objects.filter(content_type=custom_image_ct)
    
    print(f"Found {tagged_items.count()} existing tag relationships to transfer...")
    
    # Transfer each relationship
    transferred_count = 0
    for tagged_item in tagged_items:
        try:
            # Get the image and tag
            image = CustomImage.objects.get(id=tagged_item.object_id)
            tag = Tag.objects.get(id=tagged_item.tag_id)
            
            # Create CustomImageTag entry if it doesn't exist
            custom_tag, created = CustomImageTag.objects.get_or_create(
                content_object=image,
                tag=tag
            )
            
            if created:
                transferred_count += 1
                print(f"  Transferred tag '{tag.name}' to image '{image.title}'")
            
        except (CustomImage.DoesNotExist, Tag.DoesNotExist) as e:
            print(f"  Skipping invalid relationship: {e}")
            continue
    
    print(f"Successfully transferred {transferred_count} tag relationships!")


def reverse_transfer_tag_relationships(apps, schema_editor):
    """
    Reverse migration - not implemented as it could cause data loss.
    """
    print("Reverse migration not implemented to prevent data loss.")


class Migration(migrations.Migration):

    dependencies = [
        ('images', '0006_auto_20250623_0432'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
    ]

    operations = [
        migrations.RunPython(
            transfer_tag_relationships,
            reverse_transfer_tag_relationships,
        ),
    ]
